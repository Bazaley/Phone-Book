{"version":3,"file":"static/js/88.48e5c93c.chunk.js","mappings":"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","sources":["components/Particle/Particle.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","pages/AddContacts/AddContacts.styled.js","pages/AddContacts/AddContacts.jsx"],"sourcesContent":["import { useCallback } from 'react';\nimport Particles from 'react-tsparticles';\nimport { loadFull } from 'tsparticles';\n\nconst Particle = () => {\n  const particlesInit = useCallback(async engine => {\n    await loadFull(engine);\n  }, []);\n\n  return (\n    <Particles\n      id=\"tsparticles\"\n      init={particlesInit}\n      // options={{\n      //   fullScreen: {\n      //     zIndex: -1,\n      //   },\n      //   fpsLimit: 1000,\n      //   interactivity: {\n      //     events: {\n      //       onClick: {\n      //         enable: true,\n      //         mode: 'push',\n      //       },\n      //       onHover: {\n      //         enable: true,\n      //         mode: 'repulse',\n      //       },\n      //       resize: true,\n      //     },\n      //     modes: {\n      //       push: {\n      //         quantity: 4,\n      //       },\n      //       repulse: {\n      //         distance: 100,\n      //         duration: 0.4,\n      //       },\n      //     },\n      //   },\n\n      //   particles: {\n      //     color: {\n      //       value: '#0c4752',\n      //     },\n      //     links: {\n      //       color: '#08353b',\n      //       distance: 150,\n      //       enable: true,\n      //       opacity: 0.5,\n      //       width: 3,\n      //     },\n      //     collisions: {\n      //       enable: false,\n      //     },\n      //     move: {\n      //       directions: 'none',\n      //       enable: true,\n      //       outModes: {\n      //         default: 'bounce',\n      //       },\n      //       random: true,\n      //       speed: 2,\n      //       straight: true,\n      //     },\n      //     number: {\n      //       density: {\n      //         enable: true,\n      //         area: 700,\n      //       },\n      //       value: 50,\n      //     },\n      //     opacity: {\n      //       value: 0.5,\n      //     },\n      //     shape: {\n      //       type: 'circle',\n      //     },\n      //     size: {\n      //       value: { min: 4, max: 15 },\n      //     },\n      //   },\n      //   detectRetina: true,\n      // }}\n      options={{\n        fullScreen: {\n          zIndex: -1,\n        },\n        fpsLimit: 1000,\n\n        particles: {\n          number: {\n            value: 50,\n\n            density: {\n              enable: true,\n              value_area: 800,\n            },\n          },\n\n          opacity: {\n            value: 0.5,\n            random: false,\n            anim: {\n              enable: false,\n              speed: 3,\n              opacity_min: 0.1,\n              sync: false,\n            },\n          },\n          size: {\n            value: { min: 1, max: 2 },\n            random: true,\n          },\n          line_linked: {\n            enable: true,\n            distance: 200,\n            color: 'random',\n            opacity: 0.4,\n            width: 0,\n            triangles: {\n              enable: true,\n              color: '#ffffff',\n              opacity: 0.1,\n            },\n          },\n          move: {\n            enable: true,\n            speed: 1,\n            direction: 'none',\n            random: false,\n            straight: false,\n            out_mode: 'out',\n            attract: {\n              enable: false,\n              rotateX: 600,\n              rotateY: 1200,\n            },\n          },\n        },\n        interactivity: {\n          detect_on: 'canvas',\n          events: {\n            onhover: {\n              enable: true,\n              mode: 'repulse',\n            },\n            onclick: {\n              enable: true,\n              mode: 'push',\n            },\n            resize: true,\n          },\n        },\n        retina_detect: true,\n      }}\n    />\n  );\n};\n\nexport default Particle;\n","import styled from 'styled-components';\n\nexport const SectionTag = styled.section`\n  padding: 30px 0 30px;\n  text-align: center;\n`;\n\nexport const TitleStyled = styled.h1`\n  font-size: 25px;\n  margin-bottom: 20px;\n  text-shadow: 2px 1px white;\n`;\n","import PropTypes from 'prop-types';\nimport Container from 'components/Container/Container';\nimport { SectionTag, TitleStyled } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionTag>\n      <Container>\n        {title && <TitleStyled>{title}</TitleStyled>}\n\n        {children}\n      </Container>\n    </SectionTag>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.element.isRequired,\n};\n","import styled from 'styled-components';\n\nconst FormTag = styled.form`\n  margin: 0 auto;\n  padding: 30px 20px 20px;\n  border-radius: 4px;\n  box-shadow: 5px 5px 16px #756a6a;\n  background: linear-gradient(\n    130deg,\n    #008080,\n    #20b2aa,\n    #00ffff,\n    #48d1cc,\n    #00ced1\n  );\n  opacity: 0.9;\n`;\n\nconst Input = styled.input`\n  display: block;\n  width: 100%;\n  height: 23px;\n  border: none;\n  border-bottom: 1px solid black;\n  text-align: center;\n  outline: none;\n  background-color: transparent;\n  font-family: Acme;\n  font-size: 19px;\n  &::placeholder {\n    font-family: Acme;\n    font-size: 19px;\n    color: black;\n  }\n`;\n\nconst Label = styled.label`\n  display: block;\n\n  margin-bottom: 45px;\n`;\n\nconst Button = styled.button`\n  display: block;\n  width: 100%;\n  margin: 0 auto;\n  padding: 7px;\n  border-radius: 4px;\n  border: none;\n  background-color: #008080;\n  color: white;\n  font-size: 17px;\n  font-family: Acme;\n  cursor: pointer;\n`;\n\nexport { FormTag, Input, Label, Button };\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { selectContacts } from 'redux/selectors';\nimport { selectUser } from 'redux/selectors';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { FormTag, Input, Label, Button } from './AddContacts.styled';\nimport { Navigate } from 'react-router-dom';\nimport { Section } from 'components/Section/Section';\nimport { selectIsLoading } from 'redux/selectors';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Particle from 'components/Particle/Particle';\nimport { useMask } from '@react-input/mask';\n\nconst Form = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [isSubmit, setIsSubmit] = useState(false);\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const isLoading = useSelector(selectIsLoading);\n  const { id } = useSelector(selectUser);\n\n  const inputRef = useMask({\n    mask: '(___) ___-__-__',\n    replacement: { _: /\\d/ },\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (contacts.some(contact => contact.get('name') === name)) {\n      Notify.info(`${name} is already in contacts`, {\n        position: 'center-top',\n      });\n    } else {\n      dispatch(addContact({ name, number, id }));\n      setIsSubmit(true);\n    }\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      {isSubmit ? (\n        <Navigate to=\"/contacts\" />\n      ) : (\n        <Section\n          title=\"Fill out the form to add a contact to the book\n        \"\n        >\n          <FormTag onSubmit={handleSubmit}>\n            <Label>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n                placeholder=\"Contact name\"\n                pattern=\"^[a-zA-Za-яА-Я]+(([' \\-][a-zA-Za-яА-Я ])?[a-zA-Za-яА-Я]*)*\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                autoComplete=\"off\"\n              />\n            </Label>\n\n            <Label>\n              <Input\n                type=\"tel\"\n                name=\"number\"\n                value={number}\n                ref={inputRef}\n                onChange={e => setNumber(e.target.value)}\n                placeholder=\"(123) 456-78-90\"\n                required\n                autoComplete=\"off\"\n              />\n            </Label>\n\n            <Button type=\"sumbit\">\n              {isLoading ? (\n                <CircularProgress size={19} style={{ color: 'white' }} />\n              ) : (\n                ' Add contact'\n              )}\n            </Button>\n          </FormTag>\n        </Section>\n      )}\n\n      <Particle />\n    </>\n  );\n};\n\nexport default Form;\n"],"names":["particlesInit","useCallback","engine","loadFull","id","init","options","fullScreen","zIndex","fpsLimit","particles","number","value","density","enable","value_area","opacity","random","anim","speed","opacity_min","sync","size","min","max","line_linked","distance","color","width","triangles","move","direction","straight","out_mode","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","resize","retina_detect","SectionTag","styled","TitleStyled","Section","title","children","Container","FormTag","Input","Label","Button","useState","name","setName","setNumber","isSubmit","setIsSubmit","dispatch","useDispatch","contacts","useSelector","selectContacts","isLoading","selectIsLoading","selectUser","inputRef","useMask","mask","replacement","_","to","onSubmit","e","preventDefault","some","contact","get","Notify","position","addContact","type","onChange","target","placeholder","pattern","required","autoComplete","ref","CircularProgress","style","Particle"],"sourceRoot":""}