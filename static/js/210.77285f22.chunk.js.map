{"version":3,"file":"static/js/210.77285f22.chunk.js","mappings":"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","sources":["components/Particle/Particle.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","components/UpdateContact/UpdateContact.styled.js","components/UpdateContact/UpdateContact.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { useCallback } from 'react';\nimport Particles from 'react-tsparticles';\nimport { loadFull } from 'tsparticles';\n\nconst Particle = () => {\n  const particlesInit = useCallback(async engine => {\n    await loadFull(engine);\n  }, []);\n\n  return (\n    <Particles\n      id=\"tsparticles\"\n      init={particlesInit}\n      options={{\n        fullScreen: {\n          zIndex: -1,\n        },\n        fpsLimit: 1000,\n\n        particles: {\n          number: {\n            value: 50,\n\n            density: {\n              enable: true,\n              value_area: 800,\n            },\n          },\n\n          opacity: {\n            value: 0.5,\n            random: false,\n            anim: {\n              enable: false,\n              speed: 3,\n              opacity_min: 0.1,\n              sync: false,\n            },\n          },\n          size: {\n            value: { min: 1, max: 2 },\n            random: true,\n          },\n          line_linked: {\n            enable: true,\n            distance: 200,\n            color: 'random',\n            opacity: 0.4,\n            width: 0,\n            triangles: {\n              enable: true,\n              color: '#ffffff',\n              opacity: 0.1,\n            },\n          },\n          move: {\n            enable: true,\n            speed: 1,\n            direction: 'none',\n            random: false,\n            straight: false,\n            out_mode: 'out',\n            attract: {\n              enable: false,\n              rotateX: 600,\n              rotateY: 1200,\n            },\n          },\n        },\n        interactivity: {\n          detect_on: 'canvas',\n          events: {\n            onhover: {\n              enable: true,\n              mode: 'repulse',\n            },\n            onclick: {\n              enable: true,\n              mode: 'push',\n            },\n            resize: true,\n          },\n        },\n        retina_detect: true,\n      }}\n    />\n  );\n};\n\nexport default Particle;\n","import styled from 'styled-components';\n\nexport const SectionTag = styled.section`\n  padding: 30px 0 30px;\n  text-align: center;\n`;\n\nexport const TitleStyled = styled.h1`\n  font-size: 25px;\n  margin-bottom: 20px;\n  text-shadow: 2px 1px white;\n\n  @media screen and (min-width: 1200px) {\n    margin-bottom: 40px;\n    font-size: 30px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport Container from 'components/Container/Container';\nimport { SectionTag, TitleStyled } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionTag>\n      <Container>\n        {title && <TitleStyled>{title}</TitleStyled>}\n\n        {children}\n      </Container>\n    </SectionTag>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.element.isRequired,\n};\n","import styled from 'styled-components';\nimport { ImCross } from 'react-icons/im';\nimport { RxUpdate } from 'react-icons/rx';\n\nexport const Item = styled.li`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  justify-content: space-around;\n  align-items: center;\n  padding: 20px 0;\n  border: 2px solid gray;\n  border-radius: 4px;\n  box-sizing: border-box;\n  background: linear-gradient(\n    130deg,\n    #008080 50%,\n    #20b2aa,\n    #00ffff,\n    #48d1cc,\n    #00ced1\n  );\n  opacity: 0.9;\n\n  @media screen and (min-width: 767px) {\n    width: calc((100% - 90px) / 4);\n  }\n`;\n\nexport const Paragraph = styled.p`\n  font-size: 18px;\n`;\n\nexport const Button = styled.button`\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n\n  &:not(:last-child) {\n    margin-right: 10px;\n  }\n`;\n\nexport const ImCrossStyled = styled(ImCross)`\n  color: black;\n  transition: color 250ms linear;\n\n  &:hover {\n    color: red;\n  }\n`;\n\nexport const GrUpdateStyled = styled(RxUpdate)`\n  color: black;\n  transition: color 250ms linear;\n\n  &:hover {\n    color: white;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectFilterContact,\n  selectContacts,\n  selectUser,\n} from 'redux/selectors';\nimport {\n  deleteContact,\n  fetchContacts,\n} from 'redux/contacts/contacts-operations';\nimport {\n  Button,\n  Item,\n  ImCrossStyled,\n  GrUpdateStyled,\n  Paragraph,\n} from './ContactsList.styled';\n\nimport { Avatar } from '@mui/material';\n\nexport const ContactsList = ({ setContact }) => {\n  const contacts = useSelector(selectContacts);\n\n  const filter = useSelector(selectFilterContact);\n  const { id } = useSelector(selectUser);\n\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      {contacts\n        .filter(contact => {\n          return contact\n            .get('name')\n            .toLowerCase()\n            .includes(filter.toLowerCase());\n        })\n        .map(contact => {\n          const objectId = contact._getId();\n          const name = contact.get('name');\n          const phone = contact.get('phone');\n          return (\n            <Item key={objectId}>\n              <Avatar\n                sx={{\n                  bgcolor: '#48d1cc',\n                }}\n              >\n                {name[0].toUpperCase()}\n              </Avatar>\n              <Paragraph>{name}</Paragraph>\n              <Paragraph>{phone}</Paragraph>\n              <div>\n                <Button\n                  rename\n                  onClick={() => {\n                    setContact({ objectId, name, phone });\n                  }}\n                >\n                  <GrUpdateStyled size={'20px'} />\n                </Button>\n                <Button\n                  onClick={() => {\n                    dispatch(deleteContact(objectId));\n                    setTimeout(() => {\n                      dispatch(fetchContacts(id));\n                    }, 500);\n                  }}\n                >\n                  <ImCrossStyled size={'20px'} />\n                </Button>\n              </div>\n            </Item>\n          );\n        })}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Span = styled.span`\n  display: block;\n  margin-bottom: 10px;\n  font-size: 20px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  margin: 0 auto;\n  width: 300px;\n  height: 30px;\n  margin-bottom: 20px;\n  border: none;\n  border-radius: 10px;\n  text-align: center;\n`;\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filter/filterSlice';\nimport { Span, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      <Span>Find contacts by name</Span>\n\n      <Input\n        type=\"text\"\n        onChange={e => dispatch(filterContacts(e.target.value))}\n      />\n    </label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\n","import styled from 'styled-components';\n\nexport const FormTag = styled.form`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 400px;\n  padding: 30px 20px 20px;\n  border-radius: 4px;\n  box-shadow: 5px 5px 16px #756a6a;\n  background-color: #82acfb;\n  opacity: 0.9;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  width: 400px;\n  height: 23px;\n  border: none;\n  border-bottom: 1px solid black;\n  text-align: center;\n  outline: none;\n  background-color: transparent;\n  font-family: Acme;\n  font-size: 22px;\n\n  &::placeholder {\n    font-family: Acme;\n    font-size: 21px;\n    color: black;\n  }\n`;\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 45px;\n`;\n\nexport const ButtonForm = styled.button`\n  display: block;\n  width: 199px;\n  margin: 0 auto;\n  padding: 7px;\n  border-radius: 4px;\n  border: none;\n  background-color: #5c5cec;\n  color: white;\n  font-size: 17px;\n  font-family: Acme;\n  cursor: pointer;\n`;\n","import Backdrop from '@mui/material/Backdrop';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contacts-operations';\nimport { useMask } from '@react-input/mask';\nimport { FormTag, Input, Label, ButtonForm } from './UpdateContact.styled';\n\nconst UpdateContact = ({ contact, setContact }) => {\n  const [open, setOpen] = useState(true);\n  const [name, setName] = useState(contact.name);\n  const [phone, setPhone] = useState(contact.phone);\n  const [objectId] = useState(contact.objectId);\n\n  const dispatch = useDispatch();\n\n  const inputRef = useMask({\n    mask: '(___) ___-__-__',\n    replacement: { _: /\\d/ },\n  });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(updateContact({ name, phone, objectId }));\n\n    setContact(null);\n    setOpen(false);\n  };\n  return (\n    <Backdrop\n      open={open}\n      onClick={e => {\n        if (e.target.nodeName !== 'DIV') return;\n        setContact(null);\n        setOpen(false);\n      }}\n    >\n      <FormTag onSubmit={handleSubmit}>\n        <Label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={e => setName(e.target.value)}\n            placeholder=\"Contact name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            autoComplete=\"off\"\n          />\n        </Label>\n        <Label>\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={phone}\n            ref={inputRef}\n            onChange={e => setPhone(e.target.value)}\n            placeholder=\"(123) 456-78-90\"\n            required\n            autoComplete=\"off\"\n          />\n        </Label>\n\n        <ButtonForm type=\"submit\">Rename</ButtonForm>\n      </FormTag>\n    </Backdrop>\n  );\n};\n\nexport default UpdateContact;\n","import { useState, useEffect } from 'react';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Section } from 'components/Section/Section';\nimport Particle from 'components/Particle/Particle';\nimport { Filter } from 'components/Filter/Filter';\nimport { List } from './Contacts.styled';\nimport UpdateContact from 'components/UpdateContact/UpdateContact';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport { useSelector } from 'react-redux';\nimport { selectUser, selectContacts } from 'redux/selectors';\n\nconst Contacts = () => {\n  const [contact, setContact] = useState(null);\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const { id } = useSelector(selectUser);\n\n  useEffect(() => {\n    if (!contacts.length) {\n      dispatch(fetchContacts(id));\n    }\n  }, [dispatch, contacts.length, id]);\n\n  return (\n    <>\n      <Section title=\"All your contacts are located here!\">\n        <>\n          <Filter />\n          <List>\n            <ContactsList setContact={setContact} />\n          </List>\n          {contact && (\n            <UpdateContact contact={contact} setContact={setContact} />\n          )}\n        </>\n      </Section>\n      <Particle />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["particlesInit","useCallback","engine","loadFull","id","init","options","fullScreen","zIndex","fpsLimit","particles","number","value","density","enable","value_area","opacity","random","anim","speed","opacity_min","sync","size","min","max","line_linked","distance","color","width","triangles","move","direction","straight","out_mode","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","resize","retina_detect","SectionTag","styled","TitleStyled","Section","title","children","Container","Item","Paragraph","Button","ImCrossStyled","ImCross","GrUpdateStyled","RxUpdate","ContactsList","setContact","contacts","useSelector","selectContacts","filter","selectFilterContact","selectUser","dispatch","useDispatch","contact","get","toLowerCase","includes","map","objectId","_getId","name","phone","Avatar","sx","bgcolor","toUpperCase","rename","onClick","deleteContact","setTimeout","fetchContacts","Span","Input","Filter","type","onChange","e","filterContacts","target","List","FormTag","Label","ButtonForm","useState","open","setOpen","setName","setPhone","inputRef","useMask","mask","replacement","_","Backdrop","nodeName","onSubmit","preventDefault","updateContact","placeholder","pattern","required","autoComplete","ref","useEffect","length","Particle"],"sourceRoot":""}